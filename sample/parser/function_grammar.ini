module = ( (_ function_import _) / (_ function _) )*

function           = _ "function" _ identifier _
                            lpar _
                            function_arguments _
                            function_retvals _
                            rpar
                            _ exp _
                       "end" _ "function" _

function_import    = _ "function" _ identifier _  "[" _ type_list _ function_retvals _ "]" _

function_arguments = args_groups_list / _

function_retvals   = ("returns" _ type_list) / _
type_list          = type (_ "," _ type)*


args_groups_list   = arg_def_group (_ ";" _ arg_def_group)*

arg_def_group      = arg_def_list _ ":" _ type

let                = "let" _ statements _ "in" _ exp _ "end" _ "let"

if                 = "if" _ exp _ "then" _
                        exp _
                        ("elseif" _ exp _ "then" _ exp _)*
                        (_ "else" _ exp )? _
                     "end" _ "if"

arg_def_list       = identifier (_ "," _ identifier)*


operand            = brackets_algebraic / old / array_access / call / identifier / number_literal
old                = "old" _ identifier

brackets_algebraic = lpar _ algebraic _ rpar


identifier         = ~"[a-z_][a-z0-9_]*"i

number_literal     = number_literal_int / number_literal_real
number_literal_int = ~"[0-9]+"
number_literal_real= ~"[0-9]*.[0-9]+"

equation           = algebraic _ "=" _ algebraic
exp_singular       = loop / if / let / algebraic / equation / call / operand 

exp                = exp_singular (_ "," _ exp_singular)*

call               = !("function" _) identifier _ lpar _ args_list _ rpar

algebraic          = (operand) (_ bin_op _ operand)+

args_list          = exp_singular (_ "," _ exp_singular)*

lpar               = "("
rpar               = ")"
empty              = ""

_                  = ~"\s*"

bin_op             = "+" / "-" / "<="/ ">=" / "<" / ">" / "*" / "/" / "^" / "|" / "||"

array              = "array" _ "of" _ type
type               = array / std_type

array_index        = algebraic /  operand
array_access       = identifier  (_ "[" _ array_index  _"]")+


loop               = "for" _ range? _ initial? _ while? _ returns? _ "end" _ "for"
range              = range_scatter / range_numeric
 range_scatter     = identifier _ "in" _ exp_singular
 range_numeric     = identifier _ "in" _ exp_singular _ "," _ exp_singular
initial            = "let" _ statements
while              = while_do / do_while
while_do           = "while" _ exp_singular _ "do" _ statements
do_while           = "do" _ exp_singular _ "while" _ statements
returns            = "returns" _ reduction


statement          = assignment / dummy
dummy              = "dummy"
statements         = (statement _ )*
assignment         = identifier _ ":=" _ exp_singular _ (";" / _)

reduction          = reduction_type _ "of" _ exp (_ "when" _ exp_singular)?

reduction_type     = "array" / "value" / "sum"

std_type           = "integer" / "real" / "boolean"
