function           = _ "function" _ identifier _
                            lpar _
                            function_arguments _
                            function_retvals _
                            rpar
                            _ exp _
                       "end" _ "function" _

function_arguments = args_groups_list / _

function_retvals   = ("returns" _ type_list) / _
type_list          = type (_ "," _ type)*


args_groups_list   = arg_def_group (_ ";" _ arg_def_group)*

arg_def_group      = arg_def_list _ ":" _ type


if                 = "if" _ exp _ "then" _ 
                        exp _ 
                        ("elseif" _ exp _ "then" _ exp _)*  
                        (_ "else" _ exp )? _ 
                     "end" _ "if"

arg_def_list       = identifier (_ "," _ identifier)*


operand            = old / array_access / call / identifier / number_literal
old                = "old" _ identifier

brackets_algebraic = lpar _ algebraic _ rpar


identifier         = ~"[a-z_][a-z0-9_]*"i
ident_reference    = ~"[a-z_][a-z0-9_]*"i

number_literal     = number_literal_int / number_literal_real
number_literal_int = ~"[0-9]+"
number_literal_real= ~"[0-9]*.[0-9]+"

exp_singular       = for_while / if / algebraic / call / operand 
exp                = exp_singular (_ "," _ exp_singular)*

call               = !("function" _) identifier _ lpar _ args_list _ rpar

algebraic          = (operand) (_ bin_op _ operand)+

args_list          = exp_singular (_ "," _ exp_singular)*

lpar               = "("
rpar               = ")"
empty              = ""

_                  = ~"\s*"

bin_op             = "+" / "-" / "<="/ ">=" / "<" / ">" / "*" / "/" / "^" 

array              = "array" _ "of" _ type
type               = array / std_type

array_index        = algebraic /  operand
array_access       = identifier  (_ "[" _ array_index  _"]")+

for_while          = "for" _ "initial" _ statements _ while _  "end" _ "for"
while              = "while" _ lpar _ exp _ rpar _ "repeat" _ statements _ "returns" _ reduction

statement          = assignment / dummy
dummy              = "dummy" 
statements         = (statement _ )*
assignment         = identifier _ ":=" _ exp_singular

reduction          = reduction_sum / reduction_value
reduction_value    = "value" _ "of" _ exp_singular
reduction_sum      = "sum"   _ "of" _ exp_singular

std_type           = "integer" / "real" / "boolean"
